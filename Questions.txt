1.How does escape analysis work in JVM?
Answer: Escape analysis determines whether an object can be accessed outside its method, allowing for optimizations like stack allocation and synchronization removal.

2.What are some common JVM tuning parameters and their purpose?
Answer: Common tuning parameters include:
-Xms: Initial heap size.
-Xmx: Maximum heap size.
-XX:+UseG1GC: Enables G1 garbage collector.


3.What are soft, weak, phantom references in the context of JVM?
Answer: These are types of references that determine how objects are handled by the garbage collector:
SoftReference: Objects are collected only when memory is low.
WeakReference: Objects are collected at the next garbage collection cycle.
PhantomReference: Objects are collected after the finalization phase.

4.How does JVM optimize memory and execution during runtime?
Answer: JVM optimizes memory and execution using techniques like JIT compilation, garbage collection, and adaptive optimization based on runtime profiling.

5.How does JVM detect memory leaks?
Answer: JVM detects memory leaks by identifying objects that are no longer reachable but not yet collected, often using profiling tools.

6.Compare different garbage collection algorithms used in JVM.
Answer: Garbage collection algorithms include:
Serial GC: Single-threaded, suitable for small applications.
Parallel GC: Multi-thread

7.How is Java both compiled and interpreted?
Answer: Java source code (.java) is compiled into bytecode (.class) using the Java compiler (javac). This bytecode is then interpreted or compiled at runtime by the JVM's 
interpreter or JIT compiler, making Java both compiled and interpreted.

8.Your Java application is running out of memory. How would you debug the issue?
Answer:Analyze logs for OutOfMemoryError.
Use JVM flags: -Xmx, -Xms, -XX:+HeapDumpOnOutOfMemoryError.
Generate a heap dump and analyze it using tools like Eclipse MAT or VisualVM.
Look for memory leaks, excessive object retention, or high GC overhead.

9.How would you diagnose a memory leak in a large enterprise Java application?
Answer:Monitor JVM memory usage with jvisualvm, jconsole, or Prometheus + Grafana.
Trigger a heap dump on suspected leaks.
Analyze heap dump with Eclipse MAT.
Identify classes retaining memory unexpectedly (e.g., static maps, listeners).
Use profiling tools (e.g., YourKit, JProfiler) for live analysis.

10.If an application crashes with OutOfMemoryError, what steps would you take?
Answer:Check logs for OutOfMemoryError messages.
Enable -XX:+HeapDumpOnOutOfMemoryError and analyze the heap dump.
Identify memory-heavy objects and their GC roots.
Tune heap size and GC parameters as needed.
Fix code (e.g., remove strong references, cache cleanup).
Monitor in production using APM tools.

11.How can you increase heap size in JVM?
Answer:bash
-Xms512m -Xmx2g
-Xms: Initial heap size
-Xmx: Maximum heap size

12.Explain short-circuiting in logical operators.
Answer: In && and ||, Java evaluates the second operand only if needed:
a && b: If a is false, b is not evaluated.
a || b: If a is true, b is not evaluated.

13.How do bitwise operators differ from logical operators?
Answer:
Bitwise: Work at the binary level (&, |, ^).
Logical: Work with boolean values (&&, ||).

14.Suppose you have a superclass reference pointing to a subclass object. Which methods can you access?
Answer:Only overridden methods (if they exist in both). Subclass-specific methods require typecasting.

15.Can this() and super() be used in the same constructor?
Answer:No. Only one of them can be used, and it must be the first statement.

16.What is the use of final with method arguments?
Answer:It prevents reassignment of the parameter inside the method body.
void show(final int x) {
    x = x + 1;  // Error
}

17.Can we declare a class as both abstract and final?
A:No. abstract means incomplete, final means not extendable — logically contradictory.

18.Can you catch multiple exceptions in a single catch block?
Answer: Yes, using the multi-catch feature introduced in Java 7:
catch (IOException | SQLException e) {
    e.printStackTrace();
}

19.Can a finally block be used without a catch block?
Answer: Yes, a try block can be followed by a finally block without a catch block. The finally block will execute 
after the try block, whether an exception occurs or not.

20.What happens if an exception occurs in a finally block?
Answer: If an exception occurs in a finally block, it will override any exception thrown in the try or catch block, unless the earlier exception is 
explicitly propagated. This can lead to the original exception being lost, so it’s a good practice to handle exceptions in finally carefully.
try {
    throw new RuntimeException("Try block exception");
} finally {
    throw new RuntimeException("Finally block exception"); // Overrides try block exception
}

21.Can you throw an exception from a constructor?
Answer: Yes, a constructor can throw exceptions, typically to indicate invalid initialization. The caller must handle or declare these exceptions.
class MyClass {
    public MyClass(int value) throws IllegalArgumentException {
        if (value < 0) {
            throw new IllegalArgumentException("Value cannot be negative");
        }
    }
}

